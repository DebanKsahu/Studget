from typing import List

from pydantic import BaseModel, Field

from Database.Models.output_formatters import QueryInfo
from Database.Models.transaction_models import TransactionInDB


class UserInput(BaseModel):
    user_query: str = Field(min_length=1)

class InputState(BaseModel):
    user_query: str
    user_id: int

class FetchDataInState(BaseModel):
    user_id: int
    user_query: str
    extracted_info: QueryInfo

class FetchDataOutState(BaseModel):
    user_query: str
    fethed_transactions: List[TransactionInDB]

class OutputState(BaseModel):
    final_answer: str | None

class OverallState(InputState,FetchDataInState,FetchDataOutState,OutputState):
    pass

class SummarizeAgentInputState(BaseModel):
    month1_transactions: List[TransactionInDB] | None = Field(default=None)
    month2_transactions: List[TransactionInDB] | None = Field(default=None)

class SummarizeAgentIntermediateState(BaseModel):
    transaction_report: dict[str,dict]

class SummarizeAgentOutputState(BaseModel):
    """
    Structured summary generated by the spending report summarization agent.
    This matches the required output format of the LLM prompt.
    """
    executive_summary: str = Field(..., description="2-3 sentence overview of the month's spending story.")
    key_observations: List[str] = Field(..., description="Bulleted list of key financial takeaways with significance_flag: true.")
    notable_changes: str = Field(..., description="Detailed paragraph on significant changes using absolute and percentage changes.")
    new_spending_areas: str = Field(..., description="Narrative highlighting new spending categories (trend_indicator = 'New').")
    spending_to_watch: str = Field(..., description="Supportive note on areas with large increases in spending.")

class FinalOutputState(SummarizeAgentIntermediateState,SummarizeAgentOutputState):
    pass

class SummarizeAgentOverallState(
    SummarizeAgentInputState,
    FinalOutputState
):
    pass